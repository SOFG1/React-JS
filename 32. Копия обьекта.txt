

		Копия и специфика обьектов в JS.

	Как мы знаем, когда мы присваиваем переменному значение сложного типа данных(обьект или массив). 
	Присваивается не значение и содержимое, а присваивается только ссылка.
	И если мы поменяем значения одного переменного(обьекта или массива) то поменяется значение в другом тоже... т.к. по сути это один и тот же обьект.

	Пример присваивания: let obj1 = {a:1,b:2};   let obj2 = obj1;		PS - Мы к obj2 присовили ссылку первого обьекта.



	Также мы можем копировать обьекты(поверхностно), чтобы они ввели на разные ссылки, это мы можем сделать 2 способами:
	Поверхностное копирование(shallow copy) - это копирование родительского обьекта, но внутренние сложные типы данных все равно будут скопированы по ссылке.

		1) let obj1 = {a:1, b:2};	let obj2 = {...obj1}				// Мы сделали с помощью spread оператора.

		2) let ob1 = {a:1, b:2};	let obj2 = Object.assign({}, obj1)		// Мы сделали слияние с пустым(другим) обьектом




	Глубокое копирование(deep copy):


	let obj1 = {a:1, b:2};

	let obj2 = JSON.parse(JSON.stringify(obj1))	// Мы сделали обьект JSON обьектом и обратно(внутренние обьекты тоже)

	PS - Этот метод deep copy будет работать только если в обьекте будут: обьекты, массивы, числа и строки. Если обьект будет содержать функции, undefined, null, nodeList... код не сработает.
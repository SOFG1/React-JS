

		ООП - Обьектно-Ориентированное Программирование.

	ООП Обьекты отличаются от обычных обьектов - тем что имеют(содержат) методы, которые работают с внутренними данными.


	Пример: 

		let person = {

				name: "Eddie",

				age: 21,

				prof: "Programmer",

				sayName: ()=> { alert(this.name) },

				doubleAge: ()=> { this.age * 2 },

				}


	
	У нас есть ООП обьект со свойствами и методами. Интерфейс управления данным обьектом - это его свойства и методы. (person.doubleAge() например)




	!!! ИНКАПСУЛЯЦИЯ - Сокрытие внутренних деталей чего-то(обьекта)





			Приватные свойства ООП обьектов и setter-ы.

		При создании ООП обьектов приватные свойства которые инкапсулированы (не являются интерфейсными) обьекта должны начинаться с нижнего подчеркивания.

		Пример: 

				let oopObj = {
						_privateProp: "Some value",

						privateSetter: (value) => { this._privateProp = value }

						}
	
	
		// Свойство _privateProp обьекта oopObj - не предназначено для интерфейса, т.е. мы можем получить его, но этого делать не нужно(не предназначен для интерфейса).

		// privateSetter - setter данного свойства(доступен интерфейсу), мы можем менять значения _privateProperty только через setter 

		т.к. разработчик может быть задумал алгоритмы для взаимодействия со свойством. Для этого нужно пользоваться только setter-ом.

		В нашем случае код простой(можно без setter-а), но на практике должен обязательно применться setter.

		
		Например: setter может отправлять изменения на сервер, вносить изменения на сервере, а потом менять значение. 

		PS - Если поменять значение вручную работа нарушится.


		PS - также есть setter-ы и getter-ы в нативном js. 






























